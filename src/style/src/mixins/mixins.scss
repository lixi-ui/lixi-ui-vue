@import "function";
/* BEM
 -------------------------- */
@mixin b($block) {
  $B: $namespace+'-'+$block !global;
  .#{$B} {
    @content;
  }
}

@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: "";
  @each $unit in $element {
    $currentSelector: #{$currentSelector + "." + $B + $element-separator + $unit + ","};
  }

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: "";
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + & + $modifier-separator + $unit + ","};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

// button
@mixin button-plain($color, $type) {
  color: $color;
  background-color: map.get($--colors, $type, 'light-9');
  border-color: map.get($--colors, $type, 'light-6');

  &:hover,
  &:focus {
    background: $color;
    border-color: $color;
    color: var(--lx-color-white);
  }

  &:active {
    background: var(--lx-button-active-background-color);
    border-color: var(--lx-button-active-border-color);
    color: var(--lx-color-white);
    outline: none;
  }

  &.is-disabled {
    &,
    &:hover,
    &:focus,
    &:active {
      color: map.get($--colors, $type, 'light-4');
      background-color: map.get($--colors, $type, 'light-9');
      border-color: map.get($--colors, $type, 'light-8');
    }
  }
}

@mixin button-variant($type) {
  &:hover,
  &:focus {
    background: var(--lx-button-hover-color);
    border-color: var(--lx-button-hover-color);
    color: var(--lx-button-font-color);
  }

  &:active {
    background: var(--lx-button-active-background-color);
    border-color: var(--lx-button-active-border-color);
    color: var(--lx-button-active-font-color);
    outline: none;
  }

  &.is-active {
    background: var(--lx-button-active-background-color);
    border-color: var(--lx-button-active-border-color);
    color: var(--lx-button-active-font-color);
  }

  &.is-disabled {
    &,
    &:hover,
    &:focus,
    &:active {
      color: $--color-white;
      background-color: map.get($--colors, $type, 'light-5');
      border-color: map.get($--colors, $type, 'light-5');
    }
  }

  &.is-plain {
    @include button-plain(var(--lx-button-background-color), $type);
  }
}

@mixin button-size(
  $padding-vertical,
  $padding-horizontal,
  $font-size,
  $border-radius
) {
  padding: $padding-vertical $padding-horizontal;
  font-size: $font-size;
  border-radius: $border-radius;
  &.is-round {
    padding: $padding-vertical $padding-horizontal;
  }
}

/* Break-points
 -------------------------- */
 @mixin res($key, $map: $--breakpoints) {
  // 循环断点Map，如果存在则返回
  @if map-has-key($map, $key) {
    @media only screen and #{inspect(map-get($map, $key))} {
      @content;
    }
  } @else {
    @warn "Undefeined points: `#{$map}`";
  }
}